// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEG.DataAccess;

#nullable disable

namespace SEG.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_ColaSolicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMensaje")
                        .HasColumnType("Text")
                        .HasComment("Detalle de error de procasado de la solicitud.");

                    b.Property<short>("Estado")
                        .HasColumnType("smallint")
                        .HasComment("Estado del proceso de la solicitud. (0: Pendiente, 1: Procesando, 2: Exitosa, 3: Fallida).");

                    b.Property<DateTime>("FechaCreado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaUltimoIntento")
                        .HasColumnType("datetime");

                    b.Property<int>("Intentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Intentos del proceso");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("Text")
                        .HasComment("Payload para la solicitud.");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasComment("Tipo de solicitud a realizar.");

                    b.HasKey("Id");

                    b.HasIndex("Estado");

                    b.HasIndex("Tipo");

                    b.ToTable("SEG_ColaSolicitudes");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioModificadorId");

                    b.ToTable("SEG_Grupos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "ADMINISTRADORSISTEMA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(610),
                            Nombre = "ADMINISTRADOR SISTEMA",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "ADMINISTRADOREMPRESA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(614),
                            Nombre = "ADMINISTRADOR DE EMPRESA",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "ADMINISTRADORSEDE",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(617),
                            Nombre = "ADMINISTRADOR DE SEDE",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "CONTRARREFERENCIA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(620),
                            Nombre = "USUARIOS DE CONTRARREFERENCIA",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "REFERENCIA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(771),
                            Nombre = "USUARIOS DE REFERENCIA",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "REFERENCIAYCONTRARREFERENCIA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(774),
                            Nombre = "USUARIOS DE REFERENCIA Y CONTRARREFERENCIA",
                            UsuarioCreadorId = 1
                        });
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_GrupoPrograma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificado")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramaId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioModificadorId");

                    b.HasIndex("GrupoId", "ProgramaId")
                        .IsUnique();

                    b.ToTable("SEG_GruposProgramas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(939),
                            GrupoId = 1,
                            ProgramaId = 1,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 2,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(941),
                            GrupoId = 1,
                            ProgramaId = 2,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 3,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(943),
                            GrupoId = 1,
                            ProgramaId = 3,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 4,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(945),
                            GrupoId = 1,
                            ProgramaId = 4,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 5,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(947),
                            GrupoId = 1,
                            ProgramaId = 5,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 6,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(950),
                            GrupoId = 1,
                            ProgramaId = 6,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 7,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(953),
                            GrupoId = 1,
                            ProgramaId = 7,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 8,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(955),
                            GrupoId = 1,
                            ProgramaId = 8,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 9,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(957),
                            GrupoId = 1,
                            ProgramaId = 9,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 10,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(959),
                            GrupoId = 1,
                            ProgramaId = 10,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 11,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(961),
                            GrupoId = 1,
                            ProgramaId = 11,
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 12,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(962),
                            GrupoId = 1,
                            ProgramaId = 12,
                            UsuarioCreadorId = 1
                        });
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Programa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioModificadorId");

                    b.ToTable("SEG_Programas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "USUARIOSSEDESGRUPOS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(824),
                            Nombre = "ASOCIACION DE USUARIOS SEDES GRUPOS",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "CONTRARREFERENCIA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(827),
                            Nombre = "CONTRARREFERENCIA A PACIENTES",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "MEDICOSSEDES",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(829),
                            Nombre = "MEDICOS POR SEDE",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "REFERENCIA",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(832),
                            Nombre = "REFERENCIA A PACIENTES",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "EMPRESAS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(834),
                            Nombre = "EMPRESAS",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "SEDES",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(836),
                            Nombre = "SEDES",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 7,
                            Codigo = "LISTAS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(838),
                            Nombre = "MAESTRO DE LISTAS",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 8,
                            Codigo = "DATOSCONSTANTES",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(840),
                            Nombre = "MAESTRO DE DATOS CONSTANTES",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 9,
                            Codigo = "GRUPOS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(842),
                            Nombre = "MAESTRO DE GRUPOS",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 10,
                            Codigo = "PROGRAMAS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(844),
                            Nombre = "MAESTRO DE PROGRAMAS",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 11,
                            Codigo = "GRUPOSPROGRAMAS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(891),
                            Nombre = "MAESTRO DE PROGRAMAS POR GRUPO",
                            UsuarioCreadorId = 1
                        },
                        new
                        {
                            Id = 12,
                            Codigo = "USUARIOS",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(893),
                            Nombre = "MAESTRO DE USUARIOS",
                            UsuarioCreadorId = 1
                        });
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("CambiarClave")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre2")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<int>("TipoIdentificacionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioModificadorId");

                    b.HasIndex("TipoIdentificacionId", "Identificacion")
                        .IsUnique();

                    b.ToTable("SEG_Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido1 = "SISTEMA",
                            Apellido2 = "",
                            CambiarClave = true,
                            Clave = "1feTCdMwhKKkOSWaM5+yXEI0ZrBPlq9pbnB4k4+JRUU=",
                            Email = "CORREO@GMAIL.COM",
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(250),
                            Identificacion = "ADMINISTRADOR",
                            Nombre1 = "ADMINISTRADOR",
                            Nombre2 = "",
                            NombreUsuario = "ADMINISTRADOR",
                            TipoIdentificacionId = 1,
                            UsuarioCreadorId = 1
                        });
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_UsuarioSedeGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EstadoActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificado")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioModificadorId");

                    b.HasIndex("UsuarioId", "SedeId")
                        .IsUnique();

                    b.ToTable("SEG_UsuariosSedesGrupos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstadoActivo = true,
                            FechaCreado = new DateTime(2025, 7, 5, 11, 1, 22, 188, DateTimeKind.Local).AddTicks(1005),
                            GrupoId = 1,
                            SedeId = 1,
                            UsuarioCreadorId = 1,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Grupo", b =>
                {
                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("UsuarioModificadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_GrupoPrograma", b =>
                {
                    b.HasOne("SEG.Dominio.Entidades.SEG_Grupo", "Grupo")
                        .WithMany("GruposProgramas")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Programa", "Programa")
                        .WithMany("GruposProgramas")
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("UsuarioModificadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Grupo");

                    b.Navigation("Programa");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Programa", b =>
                {
                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("UsuarioModificadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Usuario", b =>
                {
                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("UsuarioModificadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_UsuarioSedeGrupo", b =>
                {
                    b.HasOne("SEG.Dominio.Entidades.SEG_Grupo", "Grupo")
                        .WithMany("UsuariosSedes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "Usuario")
                        .WithMany("UsuariosSedes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEG.Dominio.Entidades.SEG_Usuario", "UsuarioModificador")
                        .WithMany()
                        .HasForeignKey("UsuarioModificadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Grupo");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificador");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Grupo", b =>
                {
                    b.Navigation("GruposProgramas");

                    b.Navigation("UsuariosSedes");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Programa", b =>
                {
                    b.Navigation("GruposProgramas");
                });

            modelBuilder.Entity("SEG.Dominio.Entidades.SEG_Usuario", b =>
                {
                    b.Navigation("UsuariosSedes");
                });
#pragma warning restore 612, 618
        }
    }
}
